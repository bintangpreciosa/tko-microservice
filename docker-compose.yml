# docker-compose.yml
version: '3.8'

services:
# --- DATABASE SERVICES (MODIFIKASI INI) ---
  mysql_products:
    image: mysql:8.0
    container_name: mysql_products_db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: product_service
      MYSQL_ROOT_PASSWORD: ""
    ports:
      - "3307:3306"
    volumes:
      - mysql_products_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      retries: 10
      interval: 5s
      start_period: 30s

  mysql_orders:
    image: mysql:8.0
    container_name: mysql_orders_db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: order_service
      MYSQL_ROOT_PASSWORD: ""
    ports:
      - "3308:3306"
    volumes:
      - mysql_orders_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      retries: 10
      interval: 5s
      start_period: 30s

  mysql_carts:
    image: mysql:8.0
    container_name: mysql_carts_db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: cart_service
      MYSQL_ROOT_PASSWORD: ""
    ports:
      - "3309:3306"
    volumes:
      - mysql_carts_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      retries: 10
      interval: 5s
      start_period: 30s

  mysql_payments:
    image: mysql:8.0
    container_name: mysql_payments_db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: payment_service
      MYSQL_ROOT_PASSWORD: ""
    ports:
      - "3310:3306"
    volumes:
      - mysql_payments_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      retries: 10
      interval: 5s
      start_period: 30s

  mysql_shipments:
    image: mysql:8.0
    container_name: mysql_shipments_db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
      MYSQL_DATABASE: shipment_service
      MYSQL_ROOT_PASSWORD: ""
    ports:
      - "3311:3306"
    volumes:
      - mysql_shipments_data:/var/lib/mysql
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 30s
      retries: 10
      interval: 5s
      start_period: 30s

  # --- MICROSERVICE APLIKASI (MODIFIKASI INI) ---

  # Product Service
  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    container_name: product_service_app
    ports:
      - "4001:4001"
    environment:
      DB_HOST: mysql_products
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: ""
      DB_DATABASE: product_service
      PORT: 4001
      NODE_ENV: development
      DB_SYNCHRONIZE: "true"
      CUSTOMER_SERVICE_URL: http://customer-adapter-service:4006/graphql
    depends_on:
      mysql_products:
        condition: service_healthy
      customer-adapter-service:
        condition: service_healthy
    restart: on-failure
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "--data", '{"query":"{ __typename }"}', "http://localhost:4001/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Customer Adapter Service
  customer-adapter-service:
    build:
      context: ./customer-adapter-service
      dockerfile: Dockerfile
    container_name: customer_adapter_service
    restart: unless-stopped
    ports:
      - "4006:4006"
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 4006
      CRM_API_URL: ${CRM_API_URL:-http://host.docker.internal:3000}
      CRM_API_KEY: ${CRM_API_KEY:-default-api-key}
      TZ: Asia/Jakarta
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4006/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Order Service
  order-service:
    build:
      context: ./order-service
      dockerfile: Dockerfile
    container_name: order_service_app
    ports:
      - "4002:4002"
    environment:
      DB_HOST: mysql_orders
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: ""
      DB_DATABASE: order_service
      DB_SYNCHRONIZE: "true"
      PORT: 4002
      PRODUCT_SERVICE_URL: http://product-service:4001/graphql
      CUSTOMER_SERVICE_URL: http://customer-adapter-service:4006/graphql
      NODE_ENV: development
    depends_on:
      mysql_orders:
        condition: service_healthy
      product-service:
        condition: service_healthy
      customer-adapter-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "--data", '{"query":"{ __typename }"}', "http://localhost:4002/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Cart Service
  cart-service:
    build:
      context: ./cart-service
      dockerfile: Dockerfile
    container_name: cart_service_app
    ports:
      - "4003:4003"
    environment:
      DB_HOST: mysql_carts
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: ""
      DB_DATABASE: cart_service
      DB_SYNCHRONIZE: "true"
      PORT: 4003
      PRODUCT_SERVICE_URL: http://product-service:4001/graphql
      CUSTOMER_SERVICE_URL: http://customer-adapter-service:4006/graphql
      NODE_ENV: development
    depends_on:
      mysql_carts:
        condition: service_healthy
      product-service:
        condition: service_healthy
      customer-adapter-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "--data", '{"query":"{ __typename }"}', "http://localhost:4003/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Payment Service
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: payment_service_app
    ports:
      - "4004:4004"
    environment:
      DB_HOST: mysql_payments
    depends_on:
      mysql_payments:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "--data", '{"query":"{ __typename }"}', "http://localhost:4004/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Shipment Service
  shipment-service:
    build:
      context: ./shipment-service
      dockerfile: Dockerfile
    container_name: shipment_service_app
    ports:
      - "4005:4005"
    environment:
      DB_HOST: mysql_shipments
      DB_PORT: 3306
      DB_USERNAME: root
      DB_PASSWORD: ""
      DB_DATABASE: shipment_service
      DB_SYNCHRONIZE: "true"
      PORT: 4005
      ORDER_SERVICE_URL: http://order-service:4002/graphql
      NODE_ENV: development
    depends_on:
      mysql_shipments:
        condition: service_healthy
      order-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "curl", "-f", "-X", "POST", "-H", "Content-Type: application/json", "--data", '{"query":"{ __typename }"}', "http://localhost:4005/graphql"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Mendefinisikan volume untuk penyimpanan data persisten database
volumes:
  mysql_products_data:
  mysql_orders_data:
  mysql_carts_data:
  mysql_payments_data:
  mysql_shipments_data:
  mysql_customers_data:

# Mendefinisikan jaringan kustom untuk service-service
networks:
  app_network:
    driver: bridge